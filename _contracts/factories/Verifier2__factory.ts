/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Verifier2, Verifier2Interface } from "../Verifier2";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "uint256[7]",
        name: "input",
        type: "uint256[7]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d79806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063598da1d114610030575b600080fd5b610103600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160e081810190925293969594818101949350915060079083908390808284376000920191909152509194506101179350505050565b604080519115158252519081900360200190f35b6000808380602001905161010081101561013057600080fd5b50905060005b60088160ff1610156101bb577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017257fe5b6020020151106101b35760405162461bcd60e51b8152600401808060200182810382526022815260200180610d226022913960400191505060405180910390fd5b600101610136565b5060006040518060400160405280836000600881106101d657fe5b60200201518152602001836001600881106101ed57fe5b602002015190526040805160808101825284820151918101918252919250600091908190606082018660036020020151815250815260200160405180604001604052808660046008811061023d57fe5b602002015181526020018660056008811061025457fe5b6020020151905290526040805180820190915290915060009080856006602002015181526020018560076008811061028857fe5b602002015190529050600061029b610398565b60808101515190915060005b6007811015610362577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600781106102dd57fe5b60200201511061031e5760405162461bcd60e51b8152600401808060200182810382526025815260200180610cfd6025913960400191505060405180910390fd5b610358826103538560800151846001016008811061033857fe5b60200201518c856007811061034957fe5b60200201516108ba565b610951565b91506001016102a7565b5061038b61036f866109ef565b8584600001518560200151858760400151898960600151610a96565b9998505050505050505050565b6103a0610c0c565b6040805180820182527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266020808301919091529083528151608080820184527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c8285019081527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab606080850191909152908352845180860186527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8818601528385015285840192909252835180820185527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28186019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed828501528152845180860186527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa818601528185015285850152835180820185527f1a9d3ea9f95f510951ce0976835d685efc13e3a128f3e2ba16e155cd26381d908186019081527f12e6b2d1a87e8b3ddb529bee22aa6ffab4e89e7a85a7ecbbb36204fb73ffc327828501528152845180860186527f21c250bab3e083821d48580df8163e587ea70903f32f18ef58b8e015a64f786381527f0f2b1af85d0e04357f8059685a61ef88b1eff2247014fa1ad9e59a73760663bd818601528185015282860152835180850185527f1d31b0f54cad91b6c2c303d5684d92b965eaef5d0cc2887501d8a1e68d471f3381527f023f7d82b5f147c722bb1c89272b76b7363e3a1091467fa9b132fc8725aee8f181850152818601805191909152845180860186527f249665360bc3e27faf296ee7c7a69b1d9252435e14bd15d4dfe4230e85fab12d81527f1fb2141fb094edccbbdd633f6cef684c8d80d3a3c91681d2bfbb10000066eb09818601528151850152845180860186527f301255badb77ff67fde8a24209f5561c5ec5491835498d21772657e750c36b5281527f1e57df0e8c48bdb437dc30c5f9e8db9777ed93a9c122d39a634201fd95849a86818601528151860152845180860186527f1bf084a660cb1cfbd495bf63dcba814015c39fc353589b35debe9d552464eba381527f2d38851c88109817c91d8278e258fdb3506b6c760100a249fb86b48069ce9feb81860152815190930192909252835180850185527f19712402ee36cb23a935410fb875e205c7756b4b3fdaa43eecf8f0ee5904bdfb81527f2a2b86415fe05efcf1e98a50899df4b7a6b9557f3b3e5db7e1bc626f3e3e277b81850152825190910152825180840184527f0488a4f69ac492fd657a55d7e0bed2626f7fe556e26f4750f46170ca1c3aa8e081527f1164a4619ca29c72c5a3290f2c8cb15ca8aac9d0133b5e941fdeab292fd8a8df81840152815160a00152825180840184527f2bb6d35a03cd3d1f1b7e18ee9603f6ae1b5378349161cab258f05ccc00da74da81527f07fd75433cbf1a1511f3f27178bd44e27bb9eef09eed3db6b9bc4f877ade8b7581840152815160c0015282518084019093527f27a2ddc96726ea8141b2c257aa3e7fe55ecc7b87a4fe72bdb317e5d3eb91135d83527f06b4e68a2bf78c73d427d7717c821829234a62bc43f9706a62955bfc19dd8aa4918301919091525160e0015290565b6108c2610c58565b60408051606080820183528551825260208087015190830152918101849052906000908360808460076107d05a03fa90508080156108ff57610901565bfe5b5080610949576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610959610c58565b6000604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156108ff575080610949576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6109f7610c58565b8151158015610a0857506020820151155b15610a2757506040805180820190915260008082526020820152610a91565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610a6957fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6040805161030081018252895181526020808b015181830152895151928201929092528851820151606082015288820180515160808301525182015160a0820152875160c08201528782015160e08201528651516101008201528651820151610120820152868201805151610140830152518201516101608201528551610180820152858201516101a08201528451516101c082015284518201516101e08201528482018051516102008301525182015161022082015283516102408201528382015161026082015282515161028082015282518201516102a08201528282018051516102c083015251909101516102e0820152600090610b95610c72565b60006020826103008560086107d05a03fa90508080156108ff575080610bfa576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518060a00160405280610c1f610c58565b8152602001610c2c610c90565b8152602001610c39610c90565b8152602001610c46610c90565b8152602001610c53610cb0565b905290565b604051806040016040528060008152602001600081525090565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280610ca3610cde565b8152602001610c53610cde565b6040518061010001604052806008905b610cc8610c58565b815260200190600190039081610cc05790505090565b6040518060400160405280600290602082028036833750919291505056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a264697066735822122020aec3c4e41e2991416f50ada899424764ede7a674ee11fb574c84b254b0c6b464736f6c63430007060033";

export class Verifier2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Verifier2> {
    return super.deploy(overrides || {}) as Promise<Verifier2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Verifier2 {
    return super.attach(address) as Verifier2;
  }
  connect(signer: Signer): Verifier2__factory {
    return super.connect(signer) as Verifier2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Verifier2Interface {
    return new utils.Interface(_abi) as Verifier2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier2 {
    return new Contract(address, _abi, signerOrProvider) as Verifier2;
  }
}
