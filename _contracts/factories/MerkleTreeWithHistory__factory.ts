/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleTreeWithHistory,
  MerkleTreeWithHistoryInterface,
} from "../MerkleTreeWithHistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600280546001600160401b03191690553480156200002157600080fd5b50604051620015d3380380620015d38339810160408190526200004491620007eb565b60008263ffffffff1611620000765760405162461bcd60e51b81526004016200006d9062000871565b60405180910390fd5b60208263ffffffff16106200009f5760405162461bcd60e51b81526004016200006d906200083a565b6001600160e01b031960e083901b1660a0526001600160601b0319606082901b1660805260005b8263ffffffff168163ffffffff1610156200011757620000ec63ffffffff82166200015d565b63ffffffff8216600090815260208190526040902055806200010e81620008eb565b915050620000c6565b506200012963ffffffff83166200015d565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955506200091c9050565b6000816200018d57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c620007e6565b8160011415620001bf57507f1a332ca2cd2436bdc6796e6e4244ebf6f7e359868b7252e55342f766e4088082620007e6565b8160021415620001f157507f2fb19ac27499bdf9d7d3b387eff42b6d12bffbc6206e81d0ef0b0d6b24520ebd620007e6565b81600314156200022357507f18d0d6e282d4eacbf18efc619a986db763b75095ed122fac7d4a49418daa42e1620007e6565b81600414156200025557507f054dec40f76a0f5aaeff1a85a4a3721b92b4ad244362d30b0ef8ed7033de11d3620007e6565b81600514156200028757507f1d24c91f8d40f1c2591edec19d392905cf5eb01eada48d71836177ef11aea5b2620007e6565b8160061415620002b957507f0fb63621cfc047eba2159faecfa55b120d7c81c0722633ef94e20e27675e378f620007e6565b8160071415620002eb57507f277b08f214fe8c5504a79614cdec5abd7b6adc9133fe926398684c82fd798b44620007e6565b81600814156200031d57507f2633613437c1fd97f7c798e2ea30d52cfddee56d74f856a541320ae86ddaf2de620007e6565b81600914156200034e57507e768963fa4b993fbfece3619bfaa3ca4afd7e3864f11b09a0849dbf4ad25807620007e6565b81600a14156200038057507f0e63ff9df484c1a21478bd27111763ef203177ec0a7ef3a3cd43ec909f587bb0620007e6565b81600b1415620003b257507f0e6a4bfb0dd0ac8bf5517eaac48a95ba783dabe9f64494f9c892d3e8431eaab3620007e6565b81600c1415620003e457507f0164a46b3ffff8baca00de7a130a63d105f1578076838502b99488505d5b3d35620007e6565b81600d14156200041657507f145a6f1521c02b250cc76eb35cd67c9b0b22473577de3778e4c51903836c8957620007e6565b81600e14156200044857507f29849fc5b55303a660bad33d986fd156d48516ec58a0f0a561a03b704a802254620007e6565b81600f14156200047a57507f26639dd486b374e98ac6da34e8651b3fca58c51f1c2f857dd82045f27fc8dbe6620007e6565b8160101415620004ac57507f2aa39214b887ee877e60afdb191390344c68177c30a0b8646649774174de5e33620007e6565b8160111415620004de57507f09b397d253e41a521d042ffe01f8c33ae37d4c7da21af68693aafb63d599d708620007e6565b81601214156200051057507f02fbfd397ad901cea38553239aefec016fcb6a19899038503f04814cbb79a511620007e6565b81601314156200054257507f266640a877ec97a91f6c95637f843eeac8718f53f311bac9cba7d958df646f9d620007e6565b81601414156200057457507f29f9a0a07a22ab214d00aaa0190f54509e853f3119009baecb0035347606b0a9620007e6565b8160151415620005a657507f0a1fda67bffa0ab3a755f23fdcf922720820b6a96616a5ca34643cd0b935e3d6620007e6565b8160161415620005d857507f19507199eb76b5ec5abe538a01471d03efb6c6984739c77ec61ada2ba2afb389620007e6565b81601714156200060a57507f26bd93d26b751484942282e27acfb6d193537327a831df6927e19cdfc73c3e64620007e6565b81601814156200063c57507f2eb88a9c6b00a4bc6ea253268090fe1d255f6fe02d2eb745517723aae44d7386620007e6565b81601914156200066e57507f13e50d0bda78be97792df40273cbb16f0dc65c0697d81a82d07d0f6eee80a164620007e6565b81601a1415620006a057507f2ea95776929000133246ff8d9fdcba179d0b262b9e910558309bac1c1ec03d7a620007e6565b81601b1415620006d257507f1a640d6ef66e356c795396c0957b06a99891afe0c493f4d0bdfc0450764bae60620007e6565b81601c14156200070457507f2b17979f2c2048dd9e4ee5f482cced21435ea8cc54c32f80562e39a5016b0496620007e6565b81601d14156200073657507f29ba6a30de50542e261abfc7ee0c68911002d3acd4dd4c02ad59aa96805b20bb620007e6565b81601e14156200076857507f103fcf1c8a98ebe50285f6e669077a579308311fd44bb6895d5da7ba7fd3564e620007e6565b81601f14156200079a57507f166bdd01780976e655f5278260c638dcf10fe7c136f37c9152cbcaabef901f4d620007e6565b8160201415620007cc57507f2712c601a9b8b2abd396a619327095d3f1ea86a6c07d6df416a3973a1a4b3ce5620007e6565b60405162461bcd60e51b81526004016200006d90620008b4565b919050565b60008060408385031215620007fe578182fd5b825163ffffffff8116811462000812578283fd5b60208401519092506001600160a01b03811681146200082f578182fd5b809150509250929050565b6020808252601e908201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604082015260600190565b60208082526023908201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60408201526265726f60e81b606082015260800190565b60208082526013908201527f496e646578206f7574206f6620626f756e647300000000000000000000000000604082015260600190565b600063ffffffff808316818114156200091257634e487b7160e01b83526011600452602483fd5b6001019392505050565b60805160601c60a05160e01c610c846200094f600039600061031501526000818161025a0152610a5e0152610c846000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c2b40ae41161008c578063ec73295911610066578063ec73295914610178578063ed33639f14610180578063f178e47c14610195578063fc7e9c6f146101a8576100cf565b8063c2b40ae41461014a578063cd87a3b41461015d578063e829558814610165576100cf565b806338bf282e146100d4578063414a37ba146100fd5780634ecf518b146101055780636d9833e31461011a57806390eeb02b1461013a578063ba70f75714610142575b600080fd5b6100e76100e2366004610af4565b6101b0565b6040516100f49190610b51565b60405180910390f35b6100e76102ef565b61010d610313565b6040516100f49190610c11565b61012d610128366004610ac4565b610337565b6040516100f49190610b46565b61010d6103b5565b6100e76103c1565b6100e7610158366004610ac4565b6103dc565b61010d6103ee565b6100e7610173366004610ac4565b6103f3565b6100e7610a38565b610188610a5c565b6040516100f49190610b5a565b6100e76101a3366004610ac4565b610a80565b61010d610a92565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106101fa5760405162461bcd60e51b81526004016101f190610b6e565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182106102395760405162461bcd60e51b81526004016101f190610ba3565b610241610aa6565b8381526020810183905260405163014cf2b360e51b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063299e566090610297908490600401610b15565b60206040518083038186803b1580156102af57600080fd5b505afa1580156102c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e79190610adc565b949350505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081610346575060006103b0565b60025463ffffffff16805b63ffffffff8116600090815260016020526040902054841415610379576001925050506103b0565b63ffffffff8116610388575060645b8061039281610c22565b9150508163ffffffff168163ffffffff161415610351576000925050505b919050565b60025463ffffffff1681565b60025463ffffffff1660009081526001602052604090205490565b60016020526000908152604090205481565b606481565b60008161042157507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c6103b0565b816001141561045157507f1a332ca2cd2436bdc6796e6e4244ebf6f7e359868b7252e55342f766e40880826103b0565b816002141561048157507f2fb19ac27499bdf9d7d3b387eff42b6d12bffbc6206e81d0ef0b0d6b24520ebd6103b0565b81600314156104b157507f18d0d6e282d4eacbf18efc619a986db763b75095ed122fac7d4a49418daa42e16103b0565b81600414156104e157507f054dec40f76a0f5aaeff1a85a4a3721b92b4ad244362d30b0ef8ed7033de11d36103b0565b816005141561051157507f1d24c91f8d40f1c2591edec19d392905cf5eb01eada48d71836177ef11aea5b26103b0565b816006141561054157507f0fb63621cfc047eba2159faecfa55b120d7c81c0722633ef94e20e27675e378f6103b0565b816007141561057157507f277b08f214fe8c5504a79614cdec5abd7b6adc9133fe926398684c82fd798b446103b0565b81600814156105a157507f2633613437c1fd97f7c798e2ea30d52cfddee56d74f856a541320ae86ddaf2de6103b0565b81600914156105d057507e768963fa4b993fbfece3619bfaa3ca4afd7e3864f11b09a0849dbf4ad258076103b0565b81600a141561060057507f0e63ff9df484c1a21478bd27111763ef203177ec0a7ef3a3cd43ec909f587bb06103b0565b81600b141561063057507f0e6a4bfb0dd0ac8bf5517eaac48a95ba783dabe9f64494f9c892d3e8431eaab36103b0565b81600c141561066057507f0164a46b3ffff8baca00de7a130a63d105f1578076838502b99488505d5b3d356103b0565b81600d141561069057507f145a6f1521c02b250cc76eb35cd67c9b0b22473577de3778e4c51903836c89576103b0565b81600e14156106c057507f29849fc5b55303a660bad33d986fd156d48516ec58a0f0a561a03b704a8022546103b0565b81600f14156106f057507f26639dd486b374e98ac6da34e8651b3fca58c51f1c2f857dd82045f27fc8dbe66103b0565b816010141561072057507f2aa39214b887ee877e60afdb191390344c68177c30a0b8646649774174de5e336103b0565b816011141561075057507f09b397d253e41a521d042ffe01f8c33ae37d4c7da21af68693aafb63d599d7086103b0565b816012141561078057507f02fbfd397ad901cea38553239aefec016fcb6a19899038503f04814cbb79a5116103b0565b81601314156107b057507f266640a877ec97a91f6c95637f843eeac8718f53f311bac9cba7d958df646f9d6103b0565b81601414156107e057507f29f9a0a07a22ab214d00aaa0190f54509e853f3119009baecb0035347606b0a96103b0565b816015141561081057507f0a1fda67bffa0ab3a755f23fdcf922720820b6a96616a5ca34643cd0b935e3d66103b0565b816016141561084057507f19507199eb76b5ec5abe538a01471d03efb6c6984739c77ec61ada2ba2afb3896103b0565b816017141561087057507f26bd93d26b751484942282e27acfb6d193537327a831df6927e19cdfc73c3e646103b0565b81601814156108a057507f2eb88a9c6b00a4bc6ea253268090fe1d255f6fe02d2eb745517723aae44d73866103b0565b81601914156108d057507f13e50d0bda78be97792df40273cbb16f0dc65c0697d81a82d07d0f6eee80a1646103b0565b81601a141561090057507f2ea95776929000133246ff8d9fdcba179d0b262b9e910558309bac1c1ec03d7a6103b0565b81601b141561093057507f1a640d6ef66e356c795396c0957b06a99891afe0c493f4d0bdfc0450764bae606103b0565b81601c141561096057507f2b17979f2c2048dd9e4ee5f482cced21435ea8cc54c32f80562e39a5016b04966103b0565b81601d141561099057507f29ba6a30de50542e261abfc7ee0c68911002d3acd4dd4c02ad59aa96805b20bb6103b0565b81601e14156109c057507f103fcf1c8a98ebe50285f6e669077a579308311fd44bb6895d5da7ba7fd3564e6103b0565b81601f14156109f057507f166bdd01780976e655f5278260c638dcf10fe7c136f37c9152cbcaabef901f4d6103b0565b8160201415610a2057507f2712c601a9b8b2abd396a619327095d3f1ea86a6c07d6df416a3973a1a4b3ce56103b0565b60405162461bcd60e51b81526004016101f190610be4565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600254640100000000900463ffffffff1681565b60405180604001604052806002906020820280368337509192915050565b600060208284031215610ad5578081fd5b5035919050565b600060208284031215610aed578081fd5b5051919050565b60008060408385031215610b06578081fd5b50508035926020909101359150565b60408101818360005b6002811015610b3d578151835260209283019290910190600101610b1e565b50505092915050565b901515815260200190565b90815260200190565b6001600160a01b0391909116815260200190565b6020808252818101527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604082015260600190565b60208082526021908201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6040820152601960fa1b606082015260800190565b602080825260139082015272496e646578206f7574206f6620626f756e647360681b604082015260600190565b63ffffffff91909116815260200190565b600063ffffffff821680610c4457634e487b7160e01b82526011600452602482fd5b600019019291505056fea2646970667358221220b621dc9c27a21be6aff7f86613b71a36c8052662ea479ce5f141725134ec6fba64736f6c63430008000033";

export class MerkleTreeWithHistory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleTreeWithHistory> {
    return super.deploy(
      _levels,
      _hasher,
      overrides || {}
    ) as Promise<MerkleTreeWithHistory>;
  }
  getDeployTransaction(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_levels, _hasher, overrides || {});
  }
  attach(address: string): MerkleTreeWithHistory {
    return super.attach(address) as MerkleTreeWithHistory;
  }
  connect(signer: Signer): MerkleTreeWithHistory__factory {
    return super.connect(signer) as MerkleTreeWithHistory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeWithHistoryInterface {
    return new utils.Interface(_abi) as MerkleTreeWithHistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeWithHistory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MerkleTreeWithHistory;
  }
}
