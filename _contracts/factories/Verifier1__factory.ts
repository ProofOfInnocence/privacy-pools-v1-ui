/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Verifier1, Verifier1Interface } from "../Verifier1";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "uint256[5]",
        name: "input",
        type: "uint256[5]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ccd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632be688d414610030575b600080fd5b610102600480360360c081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925293969594818101949350915060059083908390808284376000920191909152509194506101169350505050565b604080519115158252519081900360200190f35b6000808380602001905161010081101561012f57600080fd5b50905060005b60088160ff1610156101ba577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017157fe5b6020020151106101b25760405162461bcd60e51b8152600401808060200182810382526022815260200180610c766022913960400191505060405180910390fd5b600101610135565b5060006040518060400160405280836000600881106101d557fe5b60200201518152602001836001600881106101ec57fe5b602002015190526040805160808101825284820151918101918252919250600091908190606082018660036020020151815250815260200160405180604001604052808660046008811061023c57fe5b602002015181526020018660056008811061025357fe5b6020020151905290526040805180820190915290915060009080856006602002015181526020018560076008811061028757fe5b602002015190529050600061029a610397565b60808101515190915060005b6005811015610361577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600581106102dc57fe5b60200201511061031d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c516025913960400191505060405180910390fd5b610357826103528560800151846001016006811061033757fe5b60200201518c856005811061034857fe5b602002015161080f565b6108a6565b91506001016102a6565b5061038a61036e86610944565b85846000015185602001518587604001518989606001516109eb565b9998505050505050505050565b61039f610b61565b6040805180820182527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266020808301919091529083528151608080820184527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c8285019081527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab606080850191909152908352845180860186527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8818601528385015285840192909252835180820185527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28186019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed828501528152845180860186527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa818601528185015285850152835180820185527f119112103484ad8135888655b7211663c0206ef6c9032b055fd856482271131b8186019081527f25614887d5e86f38d11f15226e4d1c00554d044fc5f9a7634ed829c2aa6cb840828501528152845180860186527f0e40eacf94ead1bf0f127c743c9e92380896febab265ffb8dba20f9f11bc204c81527f28c920f57e547608fd82e0287b169e6453cb3406215b2a83d223cf4ff71e9871818601528185015282860152835180850185527f12e80176dd8d1a09eb71a698dc8ce326b034cd9e69e08243f4166059aef480f581527f2bab937e2d3363b3ca0f013cb759f10c797aaf1547bb2563cd0a0d2e71525b5c81850152818601805191909152845180860186527f2c1ab67b8d0131caa47ab5a98c35f6e20a791d48206b8e338aab7e70953484ec81527f15ca15103d933e47958e8d05bf4ae205c5f1a0bbcc197191efbfae142df549ca818601528151850152845180860186527f1571f9c9f5dddef6511cb9a9605fb065432aff5782de23b3cf1784dfc08e6b2981527f078dd66e01f67bf591e79ded5df511a62db419ed7ee2426e3ef18b22120d0bf4818601528151860152845180860186527f1cc9ade52501e9e7efe6e9b6d668d8b733920eb505d66ab1924cd8d6273f3e2c81527f18b351413c0f69a8459834532f37e4891090fb2d02a1a36089b63fbc29481cc381860152815190930192909252835180850185527f2181fca001f45452bbf94b04b6bbc40b7961b707b4f517bbb3349cacb7eacc1281527f07128593663b622a6dc5452c3294149826619f5fda094039bf991da0893a39ff8185015282519091015282518084019093527f0beb1d2309d65b0802b21da5f152c9d4aec2e89a3aef2219f7a4fe59c9a66e1f83527f1f1ae727bc371d005497aca2461ffbec0fa14aea3f2d1f635962134e63754685918301919091525160a0015290565b610817610bad565b60408051606080820183528551825260208087015190830152918101849052906000908360808460076107d05a03fa905080801561085457610856565bfe5b508061089e576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b6108ae610bad565b6000604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa905080801561085457508061089e576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b61094c610bad565b815115801561095d57506020820151155b1561097c575060408051808201909152600080825260208201526109e6565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151816109be57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6040805161030081018252895181526020808b015181830152895151928201929092528851820151606082015288820180515160808301525182015160a0820152875160c08201528782015160e08201528651516101008201528651820151610120820152868201805151610140830152518201516101608201528551610180820152858201516101a08201528451516101c082015284518201516101e08201528482018051516102008301525182015161022082015283516102408201528382015161026082015282515161028082015282518201516102a08201528282018051516102c083015251909101516102e0820152600090610aea610bc7565b60006020826103008560086107d05a03fa9050808015610854575080610b4f576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518060a00160405280610b74610bad565b8152602001610b81610be5565b8152602001610b8e610be5565b8152602001610b9b610be5565b8152602001610ba8610c05565b905290565b604051806040016040528060008152602001600081525090565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280610bf8610c32565b8152602001610ba8610c32565b6040518060c001604052806006905b610c1c610bad565b815260200190600190039081610c145790505090565b6040518060400160405280600290602082028036833750919291505056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a26469706673582212200d640320e1b003fdf5c136a67f178788980861f8d1689af680380c321eb6cafe64736f6c63430007060033";

export class Verifier1__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Verifier1> {
    return super.deploy(overrides || {}) as Promise<Verifier1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Verifier1 {
    return super.attach(address) as Verifier1;
  }
  connect(signer: Signer): Verifier1__factory {
    return super.connect(signer) as Verifier1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Verifier1Interface {
    return new utils.Interface(_abi) as Verifier1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier1 {
    return new Contract(address, _abi, signerOrProvider) as Verifier1;
  }
}
