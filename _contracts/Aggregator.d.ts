/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AggregatorInterface extends ethers.utils.Interface {
  functions: {
    "ensRegistry()": FunctionFragment;
    "getAllProposals(address)": FunctionFragment;
    "getGovernanceBalances(address,address[])": FunctionFragment;
    "getUserData(address,address)": FunctionFragment;
    "relayerRegistry()": FunctionFragment;
    "relayersData(bytes32[],string[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ensRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayersData",
    values: [BytesLike[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ensRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayersData",
    data: BytesLike
  ): Result;

  events: {};
}

export class Aggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AggregatorInterface;

  functions: {
    ensRegistry(overrides?: CallOverrides): Promise<[string]>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          number
        ] & {
          proposer: string;
          target: string;
          startTime: BigNumber;
          endTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          extended: boolean;
          state: number;
        })[]
      ] & {
        proposals: ([
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          number
        ] & {
          proposer: string;
          target: string;
          startTime: BigNumber;
          endTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          extended: boolean;
          state: number;
        })[];
      }
    >;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        balance: BigNumber;
        latestProposalId: BigNumber;
        latestProposalIdState: BigNumber;
        timelock: BigNumber;
        delegatee: string;
      }
    >;

    relayerRegistry(overrides?: CallOverrides): Promise<[string]>;

    relayersData(
      _relayers: BytesLike[],
      _subdomains: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
          ]
        ] & {
          owner: string;
          balance: BigNumber;
          isRegistered: boolean;
          records: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
          ];
        })[]
      ]
    >;
  };

  ensRegistry(overrides?: CallOverrides): Promise<string>;

  getAllProposals(
    governance: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      number
    ] & {
      proposer: string;
      target: string;
      startTime: BigNumber;
      endTime: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      extended: boolean;
      state: number;
    })[]
  >;

  getGovernanceBalances(
    governance: string,
    accs: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserData(
    governance: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      balance: BigNumber;
      latestProposalId: BigNumber;
      latestProposalIdState: BigNumber;
      timelock: BigNumber;
      delegatee: string;
    }
  >;

  relayerRegistry(overrides?: CallOverrides): Promise<string>;

  relayersData(
    _relayers: BytesLike[],
    _subdomains: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      boolean,
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    ] & {
      owner: string;
      balance: BigNumber;
      isRegistered: boolean;
      records: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ];
    })[]
  >;

  callStatic: {
    ensRegistry(overrides?: CallOverrides): Promise<string>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        number
      ] & {
        proposer: string;
        target: string;
        startTime: BigNumber;
        endTime: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        executed: boolean;
        extended: boolean;
        state: number;
      })[]
    >;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        balance: BigNumber;
        latestProposalId: BigNumber;
        latestProposalIdState: BigNumber;
        timelock: BigNumber;
        delegatee: string;
      }
    >;

    relayerRegistry(overrides?: CallOverrides): Promise<string>;

    relayersData(
      _relayers: BytesLike[],
      _subdomains: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        boolean,
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ]
      ] & {
        owner: string;
        balance: BigNumber;
        isRegistered: boolean;
        records: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ];
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    ensRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    relayersData(
      _relayers: BytesLike[],
      _subdomains: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ensRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayersData(
      _relayers: BytesLike[],
      _subdomains: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
