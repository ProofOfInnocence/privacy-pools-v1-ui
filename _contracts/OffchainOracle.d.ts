/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OffchainOracleInterface extends ethers.utils.Interface {
  functions: {
    "addConnector(address)": FunctionFragment;
    "addOracle(address,uint8)": FunctionFragment;
    "connectors()": FunctionFragment;
    "getRate(address,address,bool)": FunctionFragment;
    "getRateToEth(address,bool)": FunctionFragment;
    "multiWrapper()": FunctionFragment;
    "oracles()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeConnector(address)": FunctionFragment;
    "removeOracle(address,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMultiWrapper(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addConnector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOracle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateToEth",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "multiWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracles", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeConnector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateToEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ConnectorAdded(address)": EventFragment;
    "ConnectorRemoved(address)": EventFragment;
    "MultiWrapperUpdated(address)": EventFragment;
    "OracleAdded(address,uint8)": EventFragment;
    "OracleRemoved(address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConnectorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConnectorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiWrapperUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ConnectorAddedEvent = TypedEvent<[string] & { connector: string }>;

export type ConnectorRemovedEvent = TypedEvent<
  [string] & { connector: string }
>;

export type MultiWrapperUpdatedEvent = TypedEvent<
  [string] & { multiWrapper: string }
>;

export type OracleAddedEvent = TypedEvent<
  [string, number] & { oracle: string; oracleType: number }
>;

export type OracleRemovedEvent = TypedEvent<
  [string, number] & { oracle: string; oracleType: number }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class OffchainOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OffchainOracleInterface;

  functions: {
    addConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { allConnectors: string[] }>;

    getRate(
      srcToken: string,
      dstToken: string,
      useWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weightedRate: BigNumber }>;

    getRateToEth(
      srcToken: string,
      useSrcWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weightedRate: BigNumber }>;

    multiWrapper(overrides?: CallOverrides): Promise<[string]>;

    oracles(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { allOracles: string[]; oracleTypes: number[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiWrapper(
      _multiWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addConnector(
    connector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOracle(
    oracle: string,
    oracleKind: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectors(overrides?: CallOverrides): Promise<string[]>;

  getRate(
    srcToken: string,
    dstToken: string,
    useWrappers: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRateToEth(
    srcToken: string,
    useSrcWrappers: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiWrapper(overrides?: CallOverrides): Promise<string>;

  oracles(
    overrides?: CallOverrides
  ): Promise<
    [string[], number[]] & { allOracles: string[]; oracleTypes: number[] }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeConnector(
    connector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOracle(
    oracle: string,
    oracleKind: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiWrapper(
    _multiWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addConnector(connector: string, overrides?: CallOverrides): Promise<void>;

    addOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectors(overrides?: CallOverrides): Promise<string[]>;

    getRate(
      srcToken: string,
      dstToken: string,
      useWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateToEth(
      srcToken: string,
      useSrcWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiWrapper(overrides?: CallOverrides): Promise<string>;

    oracles(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { allOracles: string[]; oracleTypes: number[] }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeConnector(
      connector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMultiWrapper(
      _multiWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConnectorAdded(address)"(
      connector?: null
    ): TypedEventFilter<[string], { connector: string }>;

    ConnectorAdded(
      connector?: null
    ): TypedEventFilter<[string], { connector: string }>;

    "ConnectorRemoved(address)"(
      connector?: null
    ): TypedEventFilter<[string], { connector: string }>;

    ConnectorRemoved(
      connector?: null
    ): TypedEventFilter<[string], { connector: string }>;

    "MultiWrapperUpdated(address)"(
      multiWrapper?: null
    ): TypedEventFilter<[string], { multiWrapper: string }>;

    MultiWrapperUpdated(
      multiWrapper?: null
    ): TypedEventFilter<[string], { multiWrapper: string }>;

    "OracleAdded(address,uint8)"(
      oracle?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, number],
      { oracle: string; oracleType: number }
    >;

    OracleAdded(
      oracle?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, number],
      { oracle: string; oracleType: number }
    >;

    "OracleRemoved(address,uint8)"(
      oracle?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, number],
      { oracle: string; oracleType: number }
    >;

    OracleRemoved(
      oracle?: null,
      oracleType?: null
    ): TypedEventFilter<
      [string, number],
      { oracle: string; oracleType: number }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectors(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(
      srcToken: string,
      dstToken: string,
      useWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateToEth(
      srcToken: string,
      useSrcWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiWrapper(
      _multiWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(
      srcToken: string,
      dstToken: string,
      useWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateToEth(
      srcToken: string,
      useSrcWrappers: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeConnector(
      connector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOracle(
      oracle: string,
      oracleKind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiWrapper(
      _multiWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
